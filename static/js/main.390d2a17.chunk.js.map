{"version":3,"sources":["logo.svg","map/Map.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Map","props","state","popup","facility","this","setState","ReactMapboxGl","accessToken","style","sources","attribution","minzoom","maxzoom","type","tiles","version","glyphs","layers","id","source","center","zoom","containerStyle","height","width","paint","facilities","map","coordinates","longitude","latitude","onClick","className","onPopupClose","name","description","num","class","rating","lastCleanedAt","amenities","microwave","changeTable","rubbishBin","toilet","shower","television","musicPlayer","highChair","sittingChair","Component","App","key","console","log","fetchData","fetch","then","res","json","data","catch","event","target","value","placeholder","onChange","e","handleChange","onSearch","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.390d2a17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\r\nimport ReactMapboxGl, { Layer, Feature, Popup } from \"react-mapbox-gl\";\r\nimport './Map.css';\r\n\r\nclass Map extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.props = props;\r\n    this.state = {\r\n      popup: null\r\n    }\r\n  }\r\n\r\n  onClick(facility) {\r\n    this.setState(state => ({ popup: facility }));\r\n  }\r\n\r\n  onPopupClose() {\r\n    this.setState(state => ({ popup: null }));\r\n  }\r\n\r\n  render() {\r\n    const Map = ReactMapboxGl({ accessToken: \"\" });\r\n    const baseMapSouce = 'base-map-source';\r\n    const style = {\r\n      sources: {\r\n        [baseMapSouce]: {\r\n          attribution: 'Wikimedia maps',\r\n          minzoom: 0,\r\n          maxzoom: 19,\r\n          type: 'raster',\r\n          tiles: ['https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}@2x.png']\r\n        }\r\n      },\r\n      version: 8,\r\n      glyphs: `https://integration.gruntimaps.com/fonts/{fontstack}/{range}`,\r\n      layers: [\r\n        {\r\n          id: 'base-map',\r\n          source: baseMapSouce,\r\n          type: 'raster'\r\n        }\r\n      ]\r\n    };\r\n    return (\r\n      <Map\r\n        style={style}\r\n        center={[153.023208, -27.466485]}\r\n        zoom={[15]}\r\n        containerStyle={{\r\n          height: \"600px\",\r\n          width: \"100vw\"\r\n        }}>\r\n        <Layer\r\n          type=\"circle\"\r\n          id=\"circle\"\r\n          paint={{ \"circle-radius\": 10, \"circle-color\": \"red\" }}>\r\n          {this.props.state.facilities.map(facility =>\r\n            <Feature\r\n              coordinates={[facility.longitude, facility.latitude]}\r\n              onClick={() => this.onClick(facility)} />\r\n          )}\r\n        </Layer>\r\n        {this.state.popup\r\n          ? <Popup\r\n            coordinates={[this.state.popup.longitude, this.state.popup.latitude]}>\r\n            <div id=\"facility-detail-popup\">\r\n              <span className=\"close-popup\" onClick={() => this.onPopupClose()}>\r\n                x\r\n                </span>\r\n              <h6>{this.state.popup.name}</h6>\r\n              <p>{this.state.popup.description}</p>\r\n              <p>Rating: \r\n                {[0,1,2,3,4].map(num => \r\n                <span class={`${this.state.popup.rating > num ? 'fas' : 'far'} fa-star`}></span>)}\r\n              </p>\r\n              <p>Last Cleaned: {this.state.popup.lastCleanedAt}</p>\r\n              <p>\r\n                <i className={`fas fa-utensils fa-2x ${this.state.popup.amenities.microwave ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-baby fa-2x ${this.state.popup.amenities.changeTable ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-trash-alt fa-2x ${this.state.popup.amenities.rubbishBin ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-toilet fa-2x ${this.state.popup.amenities.toilet ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-shower fa-2x ${this.state.popup.amenities.shower ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-tv fa-2x ${this.state.popup.amenities.television ? ' active' : ''}`}></i>\r\n              </p>\r\n              <p>\r\n                <i className={`fas fa-headphones fa-2x ${this.state.popup.amenities.musicPlayer ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-baby-carriage fa-2x ${this.state.popup.amenities.highChair ? ' active' : ''}`}></i>\r\n                <i className={`fas fa-chair fa-2x ${this.state.popup.amenities.sittingChair ? ' active' : ''}`}></i>\r\n              </p>\r\n\r\n            </div>\r\n\r\n          </Popup>\r\n          : null}\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Map;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport Map from './map/Map'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    facilities: []\r\n  };\r\n\r\n  key = null;\r\n\r\n  test() {\r\n    console.log('test')\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData()\r\n  }\r\n\r\n  fetchData() {\r\n    fetch(`https://cityinfoapiaustraliaeast.azurewebsites.net/parental-facilities${this.key ? `?key=${this.key}` : ''}`)\r\n      .then(res => res.json())\r\n      .then((data) => this.setState(state => ({ facilities: data })))\r\n      .catch(console.log)\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.key = event.target.value;\r\n  }\r\n\r\n  onSearch() {\r\n    this.fetchData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h2>Find Parental Facilities</h2>\r\n          <div className=\"input-group mb-3\">\r\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search Facilities\" onChange={e => this.handleChange(e)}/>\r\n            <div className=\"input-group-append\">\r\n              <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={() => this.onSearch()}>Search</button>\r\n            </div>\r\n          </div>\r\n          <Map state={this.state} />\r\n          <small>Click on each point for detailed information</small>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}